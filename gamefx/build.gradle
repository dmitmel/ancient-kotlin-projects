import org.gradle.internal.os.OperatingSystem

group 'org.fedofcoders.gamefx'
version '0.0.1'

buildscript {
    repositories {
        maven { url kotlinRepository }
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url kotlinRepository }
    maven { url "http://dl.bintray.com/jetbrains/spek" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.lwjgl:lwjgl:$lwjglVersion"
    OperatingSystem os = OperatingSystem.current()
    if (os.windows)     runtime "org.lwjgl:lwjgl-platform:$lwjglVersion:natives-windows"
    else if (os.macOsX) runtime "org.lwjgl:lwjgl-platform:$lwjglVersion:natives-osx"
    else if (os.unix)   runtime "org.lwjgl:lwjgl-platform:$lwjglVersion:natives-linux"
    compile "org.joml:joml:1.9.3"
    compile "io.github.java-graphics:glm:1.0.1"
    
    testCompile "org.junit.platform:junit-platform-runner:$junitPlatformVersion"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testCompile ("org.jetbrains.spek:spek-api:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntime ("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

task sourcesZip(type: Zip, group: 'build', description: 'Assembles a zip archive containing all sources.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task docsZip(type: Zip, group: 'documentation', description: 'Assemble a zip archive containing documentation.', dependsOn: dokka) {
    classifier = 'docs'
    from dokka.outputDirectory
}

tasks.withType(Zip) {     // Also will match tasks with type 'Jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from files("$projectDir/LICENSE")
}

junitPlatform {
    platformVersion junitPlatformVersion
    filters {
        engines {
            include 'spek'
        }
    }
}

dokka {
    sourceDirs = files("$projectDir/src/main/kotlin", "$projectDir/src/main/java")
}

artifacts {
    archives jar
    archives sourcesZip
    archives docsZip
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

compileKotlin {
    kotlinOptions {
        languageVersion = "1.1"
    }
}
